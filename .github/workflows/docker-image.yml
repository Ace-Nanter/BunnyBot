name: Node.js CI

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  checkAndBuild:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: 12.x

    - name: npm install
      run: npm install

    - name: linter
      run: npm run lint
 
    - name: build ts files
      run: npm run build
      
    - name: Archive builded js
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist
        retention-days: 1
          
  dockerize:
    runs-on: ubuntu-latest
    needs: checkAndBuild
    env:
      IMAGE_NAME: bunny-bot
      DOCKER_TARGET_PLATFORM: linux/arm64
      DOCKER_REGISTRY: docker-registry.pandore.ovh      
      DOCKER_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx      
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Get lite node_modules
      run: npm install --only=prod

    - name: Download builded app
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist

    - name: Prepare build
      if: success()
      id: prepare
      run: |
        IMAGE_ID=${{ secrets.DOCKER_REGISTRY_HOST }}/$IMAGE_NAME
    
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
        echo ::set-output name=docker_image::$IMAGE_ID
        echo ::set-output name=version::$VERSION
    
    - name: Login to Docker Registry
      if: success()
      run: |        
        echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

    - name: Run Buildx (Build and push)
      if: success()
      run: |        
        docker buildx build --platform ${{ steps.prepare.outputs.docker_platform }} --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} --output type=image --push .
